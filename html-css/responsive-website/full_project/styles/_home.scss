.home {
    background: radial-gradient(#525252, #131313);
}

.nav-container {
    background: rgb(23, 23, 23);
    // the reason why we wrapped the nav tag inside of this container is because we would like to set the background color of the nav bar but we also want to manipulate the size of the nav tag. if you did not wrap this in a container then what would happen is that if you adjust the color of the nav tag but also adjust the size then there will be white space leftover. but if we wrap it in this container then we can set the background color and also adjust the size of the nav tag without leaving any whitespace leftover.
    position: sticky;
    top: 0;
    z-index: 2;
}

$red : #f54538;

nav {
    width: 80%;
    margin: auto;
    // ^ this will move all of the content into the center. 
    min-height: 10vh;
    padding: 3rem 0rem;
    display: flex;
    justify-content: space-between;
    // we turned the nav tag into a flexbox and we called the justify content to put space between the children inside of the nav tag.
    align-items: center;

    ul {
        // ^ the ul here is our links in the nav bar
        display: flex;
        justify-content: space-between;
        // so we called flex onto our container that is the parent of our children and then we wante d to do space between, now the flexbox will just grow to the size of the content so if we add space between the links will be right beside one another, therefore we need to add flex-grow or shorthand flex: below. 
        flex: 1;
        // this will allow the container to grow to fill up the remaining whitespace of the parent. but if we do this then the links will be up against the logo...we must also call flex-grow to the other child so that it can take up space as well.
        list-style: none;
        align-items: center;
    }

    #logo {
        flex: 3;
        // since the links have a flex grow, we also want the logo to have flex grow so that we can divide or manipulate the space that each takes up pretty easily. if we want the logo to have more space then we can increase the number here.
        position: relative;
        &::after {
            content: "";
            position: absolute;
            // we called position absolute here bc we want it to be above the background color of the nav bar but we also applied position relative above so that when we create this item it will be relative to item, which is logo in this case. 
            top: -2.3rem;
            left: 0;
            width: 6rem;
            height: 6rem;
            background: $red;
            border-radius: 50%;
            transform: translate(-10%, 20%);
            mix-blend-mode: screen;
        }
    }
    .order {
        background: $red;
        padding: 1rem 2rem;
        border-radius: 2rem;
    }
}

.showcase {
    display: grid;
    min-height: 90vh;
    grid-template-columns: 10% repeat(3, minmax(5rem, 1fr)) 10%;
    // we created 5 columns, the first and last col being 10% and then three 3 middle col but will grow as needed for the content. which is why right now the camera column takes up the most space.
    grid-template-rows: 1fr 2fr 1fr;
    // we are creating three rows here the fr means fraction and what we are doing is very similar to flex-grow, the first and last row will be the same height but the middle row will be twice as large as those two rows.

    h2 {
        grid-column: 2/3;
        // originally this item is in the first column but using grid column we can move the item to a different column. so this will put the item in the second column which is from 2 to 3.
        align-self: flex-end;
    }

    img {
        grid-row: 2/3;
        // so here we want the img to be in the center of our grid so we moved it to the middle row but when we did this css thinks we are trying to only move it to the middle row, so it placed it in the second slot of the middle row.
        grid-column: 3/4;
        //  this will put the img in the middle column
        height: 120%;
        object-fit: cover;
        align-self: center;
        justify-self: center;
    }
    .info {
        grid-column: 4/5;
        grid-row: 3/4;
        padding-bottom: 3rem;
    }
}